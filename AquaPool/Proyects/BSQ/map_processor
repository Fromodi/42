/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   calculate.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jcorral- <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2019/12/03 13:37:37 by jcorral-          #+#    #+#             */
/*   Updated: 2019/12/04 17:53:59 by mmartin-         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include <unistd.h>
#include <stdlib.h>
#include "function.h"

int		putnbr(t_calc *map, int pos, int c)
{
	int i;

	i = map[pos - c].val;
	if (map[pos - 1].val < i)
		i = map[pos - 1].val;
	if (map[pos - c - 1].val < i)
		i = map[pos - c - 1].val;
	return (i + 1);
}

t_calc	bigger(t_calc *square, t_calc *map, int txt_pos)
{
	if (map->val > square->val)
	{
		square->val = map->val;
		square->pos = txt_pos;
	}
	return (*square);
}

int		map_value(int pos, int c, t_calc *map, int cond)
{
	if ((pos < c || pos % c == 0) && cond == 1)
		return (1);
	else if (cond == 0)
		return (0);
	else
		return (putnbr(map, pos, c));
}

t_calc	calculate(char *txt, int c, int r, char stop)
{
	t_calc	*map;
	t_calc	square;
	int		pos;
	int		txt_pos;

	pos = 0;
	txt_pos = 0;
	map = (t_calc*)malloc(c * r * sizeof(t_calc));
	square.pos = 0;
	square.val = 0;
	if (map == 0)
		return (square);
	while (pos < c * r)
	{
		map[pos].val = map_value(pos, c, map, txt[txt_pos] != stop);
		map[pos].pos = pos;
		square = bigger(&square, &map[pos], txt_pos);
		pos++;
		txt_pos++;
		if (txt[txt_pos] == '\n')
			txt_pos++;
	}
	free(map);
	return (square);
}

void	print_map(t_calc square, char *txt, int c, char print)
{
	int pos;
	int i;

	pos = square.pos - square.val + 1 - ((square.val - 1) * (c + 1));
	i = 0;
	while (pos <= square.pos)
	{
		txt[pos] = print;
		if (i == (square.val - 1))
		{
			pos = pos + (c + 1) - (square.val - 1);
			i = 0;
		}
		else
		{
			pos++;
			i++;
		}
	}
	pos = 0;
	while (txt[pos] != 0)
	{
		write(1, &txt[pos], 1);
		pos++;
	}
}
